<?php

namespace ContainerZzadlXp;


use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDebug_Security_Authenticator_JsonLogin_LoginService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'debug.security.authenticator.json_login.login' shared service.
     *
     * @return \Symfony\Component\Security\Http\Authenticator\Debug\TraceableAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['lexik_jwt_authentication.jwt_manager'] ?? $container->load('getLexikJwtAuthentication_JwtManagerService'));

        if (isset($container->privates['debug.security.authenticator.json_login.login'])) {
            return $container->privates['debug.security.authenticator.json_login.login'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['debug.security.authenticator.json_login.login'])) {
            return $container->privates['debug.security.authenticator.json_login.login'];
        }
        $c = ($container->services['translator'] ?? self::getTranslatorService($container));

        $d = new \Symfony\Component\Security\Http\Authenticator\JsonLoginAuthenticator(($container->privates['security.http_utils'] ?? $container->load('getSecurity_HttpUtilsService')), ($container->privates['security.user.provider.concrete.doctor_provider'] ?? $container->load('getSecurity_User_Provider_Concrete_DoctorProviderService')), new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler(new \Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler($a, $b, [], true), [], 'login'), new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler(new \Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler($b, $c), []), ['check_path' => '/api/doctor/login', 'username_path' => 'email', 'password_path' => 'password', 'use_forward' => false, 'login_path' => '/login'], ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)));
        if ($container->has('translator')) {
            $d->setTranslator($c);
        }

        return $container->privates['debug.security.authenticator.json_login.login'] = new \Symfony\Component\Security\Http\Authenticator\Debug\TraceableAuthenticator($d);
    }
}
